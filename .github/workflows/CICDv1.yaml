name: Compile and Publish AL Application Workflow

concurrency:
  group: ci-${{ github.workflow }}-${{ github.head_ref }}-${{ github.event.pull_request.base.ref || github.ref_name }}
  cancel-in-progress: true
  
on:
  workflow_dispatch:
    inputs:
      version_increment:
        description: 'Sürüm artış türü'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
  push:
    branches:
      - feature/FEM-1
  pull_request:
    branches:
        - prod
        - staging
        - uat
        - prerelease
        - data-migration
        - qa
        - perftest
        - 'release/**'
        - 'deploy/**'
        - 'validation/**'

jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      validation-environment: ${{ steps.environment.outputs.validation-environment }}
      release-environment: ${{ steps.environment.outputs.release-environment }}
      ignore-validation: ${{ steps.environment.outputs.ignore-validation-for-environment }}
      version-increment: ${{ github.event.inputs.version_increment || 'patch' }}
    steps:
      - name: Determine Environment Settings
        uses: KRYAYKN/dev1@main
        id: environment
        with:
          source-branch: ${{ github.head_ref }}
          destination-branch: ${{ github.base_ref }}
          event-name: ${{ github.event_name }}
          list-ignore-validation-for-environments: ${{ vars.IGNORE_VALIDATION_FOR_ENVIRONMENT }}

      - name: Log Environment Selection
        run: |
          echo "Validation Environment: ${{ steps.environment.outputs.validation-environment }}"
          echo "Release Environment: ${{ steps.environment.outputs.release-environment }}"
          echo "Version Increment: ${{ github.event.inputs.version_increment || 'patch' }}"
        shell: bash

  setup-container:
    runs-on: windows-latest
    needs: set-environment
    environment: ${{ needs.set-environment.outputs.validation-environment }}
    outputs:
      container-created: ${{ steps.create-container.outputs.container-created }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Prepare Docker
        uses: KRYAYKN/ACTION-Prepare-Docker@main
        id: prepare-docker
        
      - name: Create Staging Directory
        uses: KRYAYKN/ACTION-Creating-Staging-Directory@main
        with:
          Build_StagingDirectory: ${{ github.workspace }}\Build\Staging
          
      - name: Install BcContainerHelper
        uses: KRYAYKN/ACTION-Install-Bccontainer-Helper@main
        id: install-helper
        continue-on-error: false
        
      - name: Create BC Container
        uses: KRYAYKN/ACTION-Create-BC-Container@main
        id: create-container
        with:
          CONTAINERNAME: ${{ vars.CONTAINERNAME }}
          ARTIFACTNAME: ${{ vars.ARTIFACTNAME }}
          BC_USERNAME: ${{ secrets.BC_USERNAME }}
          BC_PASSWORD: ${{ secrets.BC_PASSWORD }}
          LICENSE_FILE: ${{ secrets.LICENSE_FILE }}
          RepositoryDirectory: ${{ github.workspace }}
        continue-on-error: false
      
      # Save the container state to potentially be reused
      - name: Save Docker Container State
        run: |
          if (-not (docker ps -q -f name=${{ vars.CONTAINERNAME }})) {
            echo "::error::Container not running. Setup failed."
            exit 1
          }
          docker commit ${{ vars.CONTAINERNAME }} ${{ vars.CONTAINERNAME }}_saved
          docker save ${{ vars.CONTAINERNAME }}_saved -o container_state.tar
          echo "Container saved successfully."
        shell: pwsh
        
      - name: Upload Container State
        uses: actions/upload-artifact@v4
        with:
          name: container-state
          path: container_state.tar
          retention-days: 7

  code-analysis:
    runs-on: windows-latest
    needs: [set-environment, setup-container]
    if: needs.setup-container.outputs.container-created == 'true'
    environment: ${{ needs.set-environment.outputs.validation-environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Install BcContainerHelper
        uses: KRYAYKN/ACTION-Install-Bccontainer-Helper@main
      
      - name: Download Container State
        uses: actions/download-artifact@v4
        with:
          name: container-state
          
      - name: Restore Container
        id: restore-container
        run: |
          if (Test-Path container_state.tar) {
            docker load -i container_state.tar
            docker tag ${{ vars.CONTAINERNAME }}_saved ${{ vars.CONTAINERNAME }}
            docker start ${{ vars.CONTAINERNAME }}
            echo "Container restored successfully."
            echo "container-restored=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "::error::Container state file not found."
            echo "container-restored=false" >> $env:GITHUB_OUTPUT
            exit 1
          }
        shell: pwsh
        
      - name: Analyze Code with CodeCop
        if: steps.restore-container.outputs.container-restored == 'true'
        uses: KRYAYKN/ACTION-AL-CodeAnalysis@main
        with:
          CONTAINERNAME: ${{ vars.CONTAINERNAME }}
          RulesetFile: ${{ github.workspace }}\.codeanalysis\codecop.ruleset.json
          CodeAnalysisExtensions: "CodeCop"
          FailOnError: true
          
      - name: Analyze Code with UICop
        if: success() && steps.restore-container.outputs.container-restored == 'true'
        uses: KRYAYKN/ACTION-AL-CodeAnalysis@main
        with:
          CONTAINERNAME: ${{ vars.CONTAINERNAME }}
          RulesetFile: ${{ github.workspace }}\.codeanalysis\uicop.ruleset.json
          CodeAnalysisExtensions: "UICop"
          FailOnError: true
          
      - name: Analyze Code with PerTenant Extensions
        if: success() && steps.restore-container.outputs.container-restored == 'true'
        uses: KRYAYKN/ACTION-AL-CodeAnalysis@main
        with:
          CONTAINERNAME: ${{ vars.CONTAINERNAME }}
          RulesetFile: ${{ github.workspace }}\.codeanalysis\pertenant.ruleset.json
          CodeAnalysisExtensions: "PerTenantExtensionCop"
          FailOnError: true
          
      - name: Cleanup Container
        if: always() && steps.restore-container.outputs.container-restored == 'true'
        run: |
          docker stop ${{ vars.CONTAINERNAME }} || true
        shell: pwsh

  unit-tests:
    runs-on: windows-latest
    needs: [set-environment, setup-container]
    if: needs.setup-container.outputs.container-created == 'true'
    environment: ${{ needs.set-environment.outputs.validation-environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Install BcContainerHelper
        uses: KRYAYKN/ACTION-Install-Bccontainer-Helper@main
        
      - name: Download Container State
        uses: actions/download-artifact@v4
        with:
          name: container-state
          
      - name: Restore Container
        id: restore-container
        run: |
          if (Test-Path container_state.tar) {
            docker load -i container_state.tar
            docker tag ${{ vars.CONTAINERNAME }}_saved ${{ vars.CONTAINERNAME }}
            docker start ${{ vars.CONTAINERNAME }}
            echo "Container restored successfully."
            echo "container-restored=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "::error::Container state file not found."
            echo "container-restored=false" >> $env:GITHUB_OUTPUT
            exit 1
          }
        shell: pwsh
        
      - name: Run AL Tests
        if: steps.restore-container.outputs.container-restored == 'true'
        id: run-tests
        uses: KRYAYKN/ACTION-AL-TestRunner@main
        with:
          CONTAINERNAME: ${{ vars.CONTAINERNAME }}
          BC_USERNAME: ${{ secrets.BC_USERNAME }}
          BC_PASSWORD: ${{ secrets.BC_PASSWORD }}
          TestSuite: "DEFAULT"
          TestResultsFormat: "JUnit"
          TestResultsFile: ${{ github.workspace }}\TestResults\results.xml
          FailOnTestFailure: true
          
      - name: Publish Test Results
        if: always() && steps.restore-container.outputs.container-restored == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ github.workspace }}\TestResults
          if-no-files-found: warn
          retention-days: 30
          
      - name: Cleanup Container
        if: always() && steps.restore-container.outputs.container-restored == 'true'
        run: |
          docker stop ${{ vars.CONTAINERNAME }} || true
        shell: pwsh

  compile-app:
    runs-on: windows-latest  
    needs: [set-environment, code-analysis, unit-tests]
    environment: ${{ needs.set-environment.outputs.validation-environment }}
    outputs:
      app-version: ${{ steps.increment-version.outputs.app-version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Install BcContainerHelper
        uses: KRYAYKN/ACTION-Install-Bccontainer-Helper@main
        
      - name: Download Container State
        uses: actions/download-artifact@v4
        with:
          name: container-state
          
      - name: Restore Container
        id: restore-container
        run: |
          if (Test-Path container_state.tar) {
            docker load -i container_state.tar
            docker tag ${{ vars.CONTAINERNAME }}_saved ${{ vars.CONTAINERNAME }}
            docker start ${{ vars.CONTAINERNAME }}
            echo "Container restored successfully."
            echo "container-restored=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "::error::Container state file not found."
            echo "container-restored=false" >> $env:GITHUB_OUTPUT
            exit 1
          }
        shell: pwsh
       
      - name: Create Staging Directory
        if: steps.restore-container.outputs.container-restored == 'true'
        uses: KRYAYKN/ACTION-Creating-Staging-Directory@main
        with:
          Build_StagingDirectory: ${{ github.workspace }}\Build\Staging

      - name: Increment App Version
        if: steps.restore-container.outputs.container-restored == 'true'
        id: increment-version
        uses: KRYAYKN/ACTION-Increase-App-Version@main
        with:
          Build_StagingDirectory: ${{ github.workspace }}\Build\Staging
          IncrementType: ${{ needs.set-environment.outputs.version-increment }}
          
      - name: Compile AL Application
        if: steps.restore-container.outputs.container-restored == 'true'
        id: compile-app
        uses: KRYAYKN/ACTION-Compile-AL-App@main
        with:
          CONTAINERNAME: ${{ vars.CONTAINERNAME }}
          BC_USERNAME: ${{ secrets.BC_USERNAME }}
          BC_PASSWORD: ${{ secrets.BC_PASSWORD }}
          Build_StagingDirectory: ${{ github.workspace }}\Artifacts

      - name: Upload Build
        if: success() && steps.restore-container.outputs.container-restored == 'true'
        uses: actions/upload-artifact@v4  
        with:
          name: build-package
          path: ${{ github.workspace }}\Artifacts
          retention-days: 90
          
      - name: Create Release Tag (on main/release branch)
        if: success() && contains(github.ref, 'main') || contains(github.ref, 'release')
        run: |
          $version = "${{ steps.increment-version.outputs.app-version }}"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "v$version" -m "Release version $version"
          git push origin "v$version"
        shell: pwsh
        
      - name: Cleanup Container
        if: always() && steps.restore-container.outputs.container-restored == 'true'
        run: |
          docker stop ${{ vars.CONTAINERNAME }} || true
          docker rm ${{ vars.CONTAINERNAME }} || true
        shell: pwsh

  publish-app:
    runs-on: windows-latest
    environment: ${{ needs.set-environment.outputs.release-environment }}
    needs: [set-environment, compile-app]
    if: needs.set-environment.outputs.release-environment != ''
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-package
          path: ${{ github.workspace }}\Artifacts

      - name: Ensure Artifacts Directory Exists
        uses: KRYAYKN/ACTION-Ensure-Artifacts-Directory@main
        with:
          ArtifactsDirectory: ${{ github.workspace }}\Artifacts    

      - name: Install BcContainerHelper
        uses: KRYAYKN/ACTION-Install-Bccontainer-Helper@main

      - name: Publish AL Application
        id: publish-app
        uses: KRYAYKN/ACTION-Publish-AL-App@main
        with:
          containerName: ${{ vars.CONTAINERNAME }}
          artifactName: ${{ vars.ARTIFACTNAME }}
          TENANT_ID: ${{ secrets.TENANT_ID }}
          ENVIRONMENT: ${{ needs.set-environment.outputs.release-environment }} 
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
          ArtifactsDirectory: ${{ github.workspace }}\Artifacts
        continue-on-error: false
          
      - name: Notify on Success
        if: success()
        run: |
          Write-Host "::notice::Application version ${{ needs.compile-app.outputs.app-version }} published successfully to ${{ needs.set-environment.outputs.release-environment }} environment."
        shell: pwsh
          
      - name: Create Rollback Plan
        if: failure()
        run: |
          Write-Host "::warning::Deployment failed. Rollback procedure:"
          Write-Host "1. Use BC Admin Center to roll back to previous version"
          Write-Host "2. Or use PowerShell command: Unpublish-BcContainerApp -containerName ${{ vars.CONTAINERNAME }} -name <appName> -version ${{ needs.compile-app.outputs.app-version }}"
        shell: pwsh

  cleanup:
    runs-on: windows-latest
    needs: [setup-container, code-analysis, unit-tests, compile-app, publish-app]
    if: always()
    steps:
      - name: Install BcContainerHelper
        uses: KRYAYKN/ACTION-Install-Bccontainer-Helper@main
        continue-on-error: true
        
      - name: Clean Docker Resources
        run: |
          docker ps -a | Where-Object {$_ -match "${{ vars.CONTAINERNAME }}"} | ForEach-Object { 
            $containerId = $_.Split()[0]
            Write-Host "Removing container $containerId"
            docker rm -f $containerId 2>$null
          }
          docker images | Where-Object {$_ -match "${{ vars.CONTAINERNAME }}"} | ForEach-

            #dddd