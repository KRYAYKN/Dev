name: Compile and Publish AL Application Workflow

concurrency:
  group: ci-${{ github.workflow }}-${{ github.head_ref }}-${{ github.event.pull_request.base.ref || github.ref_name }}
  cancel-in-progress: true
  
on:
  workflow_dispatch:
  push:
   # branches:
     # - feature/FEM-1
  pull_request:
   # branches:
    #  - main
     # - release/*

jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      validation-environment: ${{ steps.environment.outputs.validation-environment }}
      release-environment: ${{ steps.environment.outputs.release-environment }}
      ignore-validation: ${{ steps.environment.outputs.ignore-validation-for-environment }}
    steps:
      - uses: KRYAYKN/dev1@main
        id: environment
        with:
          source-branch: ${{ github.head_ref }}
          destination-branch: ${{ github.base_ref }}
          event-name: ${{ github.event_name }}
          list-ignore-validation-for-environments: ${{ vars.IGNORE_VALIDATION_FOR_ENVIRONMENT }}

  setup-container:
    runs-on: windows-latest
    needs: set-environment
    environment: ${{ needs.set-environment.outputs.validation-environment }}
    outputs:
      container-created: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Prepare Docker
        uses: KRYAYKN/ACTION-Prepare-Docker@main
        
      - name: Create Staging Directory
        uses: KRYAYKN/ACTION-Creating-Staging-Directory@main
        with:
          Build_StagingDirectory: ${{ github.workspace }}\Build\Staging
          
      - name: Install BcContainerHelper
        uses: KRYAYKN/ACTION-Install-Bccontainer-Helper@main
        
      - name: Create BC Container
        uses: KRYAYKN/ACTION-Create-BC-Container@main
        with:
          CONTAINERNAME: ${{ vars.CONTAINERNAME }}
          ARTIFACTNAME: ${{ vars.ARTIFACTNAME }}
          BC_USERNAME: ${{ secrets.BC_USERNAME }}
          BC_PASSWORD: ${{ secrets.BC_PASSWORD }}
          LICENSE_FILE: ${{ secrets.LICENSE_FILE }}
          RepositoryDirectory: ${{ github.workspace }}
      
      # Save the container state to potentially be reused
      - name: Save Docker Container State
        run: |
          docker commit ${{ vars.CONTAINERNAME }} ${{ vars.CONTAINERNAME }}_saved
          docker save ${{ vars.CONTAINERNAME }}_saved -o container_state.tar
        shell: pwsh
        
      - name: Upload Container State
        uses: actions/upload-artifact@v4
        with:
          name: container-state
          path: container_state.tar
          retention-days: 1

  code-analysis:
    runs-on: windows-latest
    needs: [set-environment, setup-container]
    environment: ${{ needs.set-environment.outputs.validation-environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Install BcContainerHelper
        uses: KRYAYKN/ACTION-Install-Bccontainer-Helper@main
      
      - name: Download Container State
        uses: actions/download-artifact@v4
        with:
          name: container-state
          
      - name: Restore Container
        run: |
          docker load -i container_state.tar
          docker tag ${{ vars.CONTAINERNAME }}_saved ${{ vars.CONTAINERNAME }}
          docker start ${{ vars.CONTAINERNAME }}
        shell: pwsh
        
      - name: Analyze Code with CodeCop
        uses: KRYAYKN/ACTION-AL-CodeAnalysis@main
        with:
          CONTAINERNAME: ${{ vars.CONTAINERNAME }}
          RulesetFile: ${{ github.workspace }}\.codeanalysis\codecop.ruleset.json
          CodeAnalysisExtensions: "CodeCop"
          FailOnError: true
          
      - name: Analyze Code with UICop
        uses: KRYAYKN/ACTION-AL-CodeAnalysis@main
        with:
          CONTAINERNAME: ${{ vars.CONTAINERNAME }}
          RulesetFile: ${{ github.workspace }}\.codeanalysis\uicop.ruleset.json
          CodeAnalysisExtensions: "UICop"
          FailOnError: true
          
      - name: Analyze Code with PerTenant Extensions
        uses: KRYAYKN/ACTION-AL-CodeAnalysis@main
        with:
          CONTAINERNAME: ${{ vars.CONTAINERNAME }}
          RulesetFile: ${{ github.workspace }}\.codeanalysis\pertenant.ruleset.json
          CodeAnalysisExtensions: "PerTenantExtensionCop"
          FailOnError: true

  unit-tests:
    runs-on: windows-latest
    needs: [set-environment, setup-container]
    environment: ${{ needs.set-environment.outputs.validation-environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Install BcContainerHelper
        uses: KRYAYKN/ACTION-Install-Bccontainer-Helper@main
        
      - name: Download Container State
        uses: actions/download-artifact@v4
        with:
          name: container-state
          
      - name: Restore Container
        run: |
          docker load -i container_state.tar
          docker tag ${{ vars.CONTAINERNAME }}_saved ${{ vars.CONTAINERNAME }}
          docker start ${{ vars.CONTAINERNAME }}
        shell: pwsh
        
      - name: Run AL Tests
        uses: KRYAYKN/ACTION-AL-TestRunner@main
        with:
          CONTAINERNAME: ${{ vars.CONTAINERNAME }}
          BC_USERNAME: ${{ secrets.BC_USERNAME }}
          BC_PASSWORD: ${{ secrets.BC_PASSWORD }}
          TestSuite: "DEFAULT"
          TestResultsFormat: "JUnit"
          TestResultsFile: ${{ github.workspace }}\TestResults\results.xml
          FailOnTestFailure: true
          
      - name: Publish Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ github.workspace }}\TestResults
          if-no-files-found: error

  compile-app:
    runs-on: windows-latest  
    needs: [set-environment, code-analysis, unit-tests]
    environment: ${{ needs.set-environment.outputs.validation-environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Install BcContainerHelper
        uses: KRYAYKN/ACTION-Install-Bccontainer-Helper@main
        
      - name: Download Container State
        uses: actions/download-artifact@v4
        with:
          name: container-state
          
      - name: Restore Container
        run: |
          docker load -i container_state.tar
          docker tag ${{ vars.CONTAINERNAME }}_saved ${{ vars.CONTAINERNAME }}
          docker start ${{ vars.CONTAINERNAME }}
        shell: pwsh
       
      - name: Create Staging Directory
        uses: KRYAYKN/ACTION-Creating-Staging-Directory@main
        with:
          Build_StagingDirectory: ${{ github.workspace }}\Build\Staging

      - name: Increment App Version
        uses: KRYAYKN/ACTION-Increase-App-Version@main
        with:
          Build_StagingDirectory: ${{ github.workspace }}\Build\Staging
          
      - name: Compile AL Application
        uses: KRYAYKN/ACTION-Compile-AL-App@main
        with:
          CONTAINERNAME: ${{ vars.CONTAINERNAME }}
          BC_USERNAME: ${{ secrets.BC_USERNAME }}
          BC_PASSWORD: ${{ secrets.BC_PASSWORD }}
          Build_StagingDirectory: ${{ github.workspace }}\Artifacts

      - name: Upload Build
        uses: actions/upload-artifact@v4  
        with:
          name: build-package
          path: ${{ github.workspace }}\Artifacts

  publish-app:
    runs-on: windows-latest
    environment: ${{ needs.set-environment.outputs.release-environment }}
    needs: [set-environment, compile-app]
    if: needs.set-environment.outputs.release-environment != ''
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-package
          path: ${{ github.workspace }}\Artifacts

      - name: Ensure Artifacts Directory Exists
        uses: KRYAYKN/ACTION-Ensure-Artifacts-Directory@main
        with:
          ArtifactsDirectory: ${{ github.workspace }}\Artifacts    

      - name: Install BcContainerHelper
        uses: KRYAYKN/ACTION-Install-Bccontainer-Helper@main

      - name: Publish AL Application
        uses: KRYAYKN/ACTION-Publish-AL-App@main
        with:
          containerName: ${{ vars.CONTAINERNAME }}
          artifactName: ${{ vars.ARTIFACTNAME }}
          TENANT_ID: ${{ secrets.TENANT_ID }}
          ENVIRONMENT: ${{ needs.set-environment.outputs.release-environment }} 
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
          ArtifactsDirectory: ${{ github.workspace }}\Artifacts